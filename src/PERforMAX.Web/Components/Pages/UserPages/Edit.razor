@page "/Users/edit"
@inject PERforMAX.Data.DataContext DB
@using PERforMAX.Domain.Entities
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>User</h4>
<hr />
@if (User is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="User" OnValidSubmit="UpdateUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="User.Id" value="@User.Id" />
                <div class="mb-3">
                    <label for="firstname" class="form-label">Firstname:</label>
                    <InputText id="firstname" @bind-Value="User.Firstname" class="form-control" />
                    <ValidationMessage For="() => User.Firstname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="lastname" class="form-label">Lastname:</label>
                    <InputText id="lastname" @bind-Value="User.Lastname" class="form-control" />
                    <ValidationMessage For="() => User.Lastname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="User.Email" class="form-control" />
                    <ValidationMessage For="() => User.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="User.Password" class="form-control" />
                    <ValidationMessage For="() => User.Password" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="birthdate" class="form-label">BirthDate:</label>
                    <InputDate id="birthdate" @bind-Value="User.BirthDate" class="form-control" />
                    <ValidationMessage For="() => User.BirthDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputNumber id="createdby" @bind-Value="User.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => User.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputNumber id="updatedby" @bind-Value="User.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => User.UpdatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="deletedby" class="form-label">DeletedBy:</label>
                    <InputNumber id="deletedby" @bind-Value="User.DeletedBy" class="form-control" />
                    <ValidationMessage For="() => User.DeletedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="creationdate" class="form-label">CreationDate:</label>
                    <InputDate id="creationdate" @bind-Value="User.CreationDate" class="form-control" />
                    <ValidationMessage For="() => User.CreationDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="modifieddate" class="form-label">ModifiedDate:</label>
                    <InputDate id="modifieddate" @bind-Value="User.ModifiedDate" class="form-control" />
                    <ValidationMessage For="() => User.ModifiedDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="deletedate" class="form-label">DeleteDate:</label>
                    <InputDate id="deletedate" @bind-Value="User.DeleteDate" class="form-control" />
                    <ValidationMessage For="() => User.DeleteDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public User? User { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User ??= await DB.Users.FirstOrDefaultAsync(m => m.Id == Id);

        if (User is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateUser()
    {
        DB.Attach(User!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!UserExists(User!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/users");
    }

    bool UserExists(int id)
    {
        return DB.Users.Any(e => e.Id == id);
    }
}
